float trapezoidal(float a, float b, int N, Vector -> Vector f) {
    /* composite trapezoidal rule for integrals */

    float h = (b-a)/N;
    Vector x = a + (range(1, N + 1) - 0.5) * h;
    Vector w = ones(N)*h;
    w[0] = h/2; w[N - 1] = h/2;
    return w*f(x);
}

Vector identity(Vector x) {
    return x;
}

Vector constant(Vector x) {
    return ones_like(x);
}

Vector cospi(Vector x) {
    return cos(x * 3.14159);
}

void main() {
    int N = 50; /* 50 is kind of slow.  you can change this to 20 for faster results */
    println("integral dx on (0, 1) = ", trapezoidal(0.0, 1.0, N, constant));
    println("integral x dx on (0, 1) = ", trapezoidal(0.0, 1.0, N, identity));
    println("integral cos(pi x) dx on ( 0, 1) = ", trapezoidal(0.0, 1.0, N, cospi));
    println("integral cos(pi x) dx on (-1, 1) = ", trapezoidal(-1.0, 1.0, N, cospi));
}

/*
expected output:

integral dx on (0, 1) = 9.8000000000000054e-01
integral x dx on (0, 1) = 4.900000000000001e-01
integral cos(pi x) dx on ( 0, 1) = 8.4396998875808926e-07
integral cos(pi x) dx on (-1, 1) = 3.9922753046682358e-02
*/